/*
 * Licensed to the LookML Authors under one or more contributor
 * license agreements.  See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership.
 * The LookML Authors license this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(LookmlParserImpl)

package net.hydromatic.lookml.parse;

import net.hydromatic.lookml.Pos;
import net.hydromatic.lookml.ListHandler;
import net.hydromatic.lookml.ObjectHandler;
import net.hydromatic.lookml.Source;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.Set;

/**
 * Parser for well-formed LookML, generated from LookmlParser.jj by JavaCC.
 *
 * <p>Limitations:
 * <ul>
 * <li>Comments can only occur in objects and in lists
 *     (not, say, before a comma in a list)
 * <li>No raw string literals
 * <li>Backslash double-quote is the only escape in string literals
 * <li>Identifiers can only be single-part (e.g. 'orders' but not
       'orders.order_date')
 * </ul>
 */
class LookmlParserImpl {
  private static final Logger LOGGER =
      LoggerFactory.getLogger("net.hydromatic.lookml.parse");

  private Set<String> codePropertyNames;
  private Source source; // for future multi-file support
  private int lineOffset; // for future multi-file support

  /** Configures the parser. */
  void config(LookmlParsers.Config config) {
    jj_input_stream.setTabSize(config.tabSize());
    this.codePropertyNames = config.codePropertyNames();
    this.source = config.source();
  }

  /** Returns the position of the last token returned by the parser. */
  Pos pos() {
    return new Pos(source,
        token.beginLine - lineOffset, token.beginColumn,
        token.endLine - lineOffset, token.endColumn + 1);
  }

  Pos.Builder start() {
    return Pos.builder(source,
        token.beginLine - lineOffset, token.beginColumn,
        token.endLine - lineOffset, token.endColumn + 1);
  }

  Pos end(Pos.Builder pb) {
    pb.union(token.endLine - lineOffset, token.endColumn + 1);
    return pb.build();
  }
}

PARSER_END(LookmlParserImpl)

/* For Debug */
JAVACODE
void debug_message1()
{
  LOGGER.info("{} , {}", getToken(0).image, getToken(1).image);
}

// Atoms and literals

BigDecimal number() : {}
{
  <NUMBER_LITERAL> { return new BigDecimal(token.image); }
}

String string() : {}
{
  <QUOTED_STRING> { return token.image.substring(1, token.image.length() - 1); }
}

String identifier() : {}
{
  <IDENTIFIER> { return token.image; }
}

String comment() : {}
{
  <COMMENT> { return token.image; }
}

/** Parses a document, e.g. 'model: m {}'. */
void document(ObjectHandler h) : {}
{
  ( commentInObj(h) )*
  property(h)
  ( commentInObj(h) )*
  { h.close(pos()); }
}

/** Parses the body of an object. */
void objectBody(ObjectHandler h) : {}
{
  ( objectElement(h) )*
}

/** Parses an element (property or comment) in an object. */
void objectElement(ObjectHandler h) : {}
{
  LOOKAHEAD(1)
  commentInObj(h)
|
  property(h)
}

/** Parses the body of a list.
    It is a sequence of values, separated by commas.
    Any number of comments can occur before or after values. */
void listBody(ListHandler h) : {}
{
  ( commentInList(h) )*
  [
    value(h)
    ( commentInList(h) )*
    (
      <COMMA>
      ( commentInList(h) )*
      value(h)
      ( commentInList(h) )*
    )*
  ]
}

/** Parses a property, e.g. 'p: true', 'q: 1', 'r: []', 's: name {}',
  * 't: {}', 'u: "string"'. */
void property(ObjectHandler h) : {
  String propertyName;
  final Pos.Builder pb;
}
{
  propertyName = identifier() { pb = start(); }
  <COLON>
  {
    if (codePropertyNames.contains(propertyName)) {
      token_source.SwitchTo(IN_CODE);
    }
  }
  (
    codeProperty(pb, propertyName, h)
  |
    identifierProperty(pb, propertyName, h)
  |
    numberProperty(pb, propertyName, h)
  |
    stringProperty(pb, propertyName, h)
  |
    listProperty(pb, propertyName, h)
  |
    objectProperty(pb, propertyName, h)
  )
}

/** Parses a code property, e.g. 'sql: VALUES 1;;'.
 *
 * <p>Must be in the {@link #IN_CODE} lexical state. */
void codeProperty(Pos.Builder pb, String propertyName, ObjectHandler h) : {
  final StringBuilder b = new StringBuilder();
}
{
  ( <CODE> { b.append(token.image); } )*
  <END_CODE> {
    h.code(end(pb), propertyName, b.toString());
  }
}

/** Parses a number property, e.g. 'p: 1', 'q: -2', 'r: -3.5'. */
void numberProperty(Pos.Builder pb, String propertyName, ObjectHandler h) : {
  BigDecimal number;
}
{
  number = number() {
    h.number(end(pb), propertyName, number);
  }
}

/** Parses a string property, e.g. p: 'abc'. */
void stringProperty(Pos.Builder pb, String propertyName, ObjectHandler h) : {
  String string;
}
{
  string = string() {
    h.string(end(pb), propertyName, string);
  }
}

/** Parses a list property, e.g. 'p: [1, 2]'. */
void listProperty(Pos.Builder pb, String propertyName, ObjectHandler h) : {
  ListHandler h2;
}
{
  <LBRACKET> { h2 = h.listOpen(end(pb), propertyName); }
  listBody(h2)
  <RBRACKET> { h2.close(pos()); }
}

/** Parses an identifier, enum, boolean or named-object property,
  * e.g. 'x: true', 'y: no', 'v: orders', 'type: inner_join',
  * 'dimension: d {}'. At this stage we don't know the enum
  * values, so we treat them all as identifiers. */
void identifierProperty(Pos.Builder pb, String propertyName,
    ObjectHandler h) : {
  String identifier;
  ObjectHandler h2;
}
{
  identifier = identifier()
  (
    LOOKAHEAD(1)
    <LBRACE> { h2 = h.objOpen(end(pb), propertyName, identifier); }
    objectBody(h2)
    <RBRACE> { h2.close(pos()); }
  |
    /* empty */
    { h.identifier(end(pb), propertyName, identifier); }
  )
}

/** Parses an object property, e.g. 'x: {y: 2}'. */
void objectProperty(Pos.Builder pb, String propertyName, ObjectHandler h) : {
  ObjectHandler h2;
}
{
  <LBRACE> { h2 = h.objOpen(end(pb), propertyName); }
  objectBody(h2)
  <RBRACE> { h2.close(pos()); }
}

/** Parses a value in a list, e.g. '1', 'abc', '"abc"', '[1, [2], []]'. */
void value(ListHandler h) : {
  BigDecimal number;
  String string;
  String identifier;
  ListHandler h2;
  final Pos.Builder pb;
}
{
  number = number() { h.number(pos(), number); }
|
  string = string() { h.string(pos(), string); }
|
  identifier = identifier()
  (
     { pb = start(); }
     <COLON> string = string() { h.pair(end(pb), identifier, string); }
  |
     { h.identifier(pos(), identifier); }
  )
|
  <LBRACKET> { h2 = h.listOpen(pos()); }
  listBody(h2)
  <RBRACKET> { h2.close(pos()); }
}

/** Parses a comment inside an object. */
void commentInObj(ObjectHandler h) : {
  String comment;
}
{
  comment = comment() { h.comment(pos(), comment); }
}

/** Parses a comment inside a list. */
void commentInList(ListHandler h) : {
  String comment;
}
{
  comment = comment() { h.comment(pos(), comment); }
}

/* LITERALS */

<DEFAULT> TOKEN :
{
  < NUMBER_LITERAL: ("-")?
      (["0"-"9"])+
      ("." (["0"-"9"])+)?
      (["e", "E"] ("-")?(["0"-"9"])+)? >
| < QUOTED_STRING: <DOUBLE_QUOTE> ( (~["\"", "\\"]) | ("\\" "\"") | ("\\" "\\") )* <DOUBLE_QUOTE> >
| < DOUBLE_QUOTE: "\"" >

| < IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "_", "0"-"9"])* >

| < COMMENT: "#" (~["\n", "\r"])* >
}

<DEFAULT> SKIP :
{ " "
| "\t"
| "\n"
| "\r"
| "\f"
}

<DEFAULT> TOKEN :
{
  < #WHITESPACE: [ " ","\t","\n","\r","\f" ] >
}

<DEFAULT> TOKEN :
{
  < COMMA: "," >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COLON: ":" >
}

// A separate lexical state for parsing code blocks, e.g. "sql: ...;;"
// The parser enters the IN_CODE lexical state after seeing the "sql"
// identifier. Seeing ";;" leaves the lexical state.
<IN_CODE> TOKEN :
{
  < END_CODE: ";;" > : DEFAULT
| < CODE: ~[] >
}

// End LookmlParser.jj
