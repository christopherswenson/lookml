/*
 * Licensed to the LookML Authors under one or more contributor
 * license agreements.  See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership.
 * The LookML Authors license this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */
package net.hydromatic.lookml.parse;

import net.hydromatic.lookml.ObjectHandler;

import com.google.common.collect.ImmutableSortedSet;

import java.io.Reader;
import java.io.StringReader;
import java.util.Set;

/** Utilities for parsing LookML. */
public class LookmlParsers {
  private LookmlParsers() {}

  /**
   * Parses a LookML string.
   *
   * <p>The parser is push-based, which means that rather than creating an
   * abstract syntax tree (AST) it generates a stream of events.
   *
   * @param handler Consumer of the events generated by the parser
   * @param code LookML code to parse
   * @param config Parser configuration
   */
  public static void parse(ObjectHandler handler, String code, Config config) {
    final Reader reader = new StringReader(code);
    final LookmlParserImpl parser = new LookmlParserImpl(reader);
    parser.config(config);
    try {
      parser.document(handler);
    } catch (ParseException e) {
      throw new RuntimeException(e);
    }
  }

  /** Returns the default configuration. */
  public static Config config() {
    return ConfigImpl.DEFAULT;
  }

  /** Configuration for parser. */
  public interface Config {
    /** Names of properties that are followed by a code block. */
    Set<String> codePropertyNames();

    /** Sets {@link #codePropertyNames()}. */
    Config withCodePropertyNames(Iterable<String> codePropertyNames);

    /** Number of spaces that a tab expands to. */
    int tabSize();

    /** Sets {@link #tabSize()}. */
    Config withTabSize(int tabSize);
  }

  /** Implementation of {@link Config}. */
  private static class ConfigImpl implements Config {
    private static final Config DEFAULT =
        new ConfigImpl(ImmutableSortedSet.of(), 1);

    private final Set<String> codePropertyNames;
    private final int tabSize;

    ConfigImpl(Iterable<String> codePropertyNames, int tabSize) {
      this.codePropertyNames = ImmutableSortedSet.copyOf(codePropertyNames);
      this.tabSize = tabSize;
    }

    @Override public Set<String> codePropertyNames() {
      return codePropertyNames;
    }

    @Override public Config withCodePropertyNames(
        Iterable<String> codePropertyNames) {
      return new ConfigImpl(codePropertyNames, tabSize);
    }

    @Override public int tabSize() {
      return tabSize;
    }

    @Override public Config withTabSize(int tabSize) {
      return new ConfigImpl(codePropertyNames, tabSize);
    }
  }
}

// End LookmlParsers.java
